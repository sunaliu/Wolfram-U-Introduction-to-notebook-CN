1
00:00:00,800 --> 00:00:02,800
Wolfram 笔记本简介的这一部分 


2
00:00:02,800 --> 00:00:05,000
关于输入程序 


3
00:00:05,000 --> 00:00:07,000
和使程序更具可读性的功能 


4
00:00:07,000 --> 00:00:08,000
一个简单例子 

5
00:00:08,000 --> 00:00:11,000
这是一个基于 Manipulate 函数的短程序 


6
00:00:11,000 --> 00:00:13,000
当输入的括号不匹配、命令名不完整


7
00:00:13,000 --> 00:00:15,500
以及其他任何暂时的错误时 


8
00:00:15,500 --> 00:00:18,200
诸如此类的语法错误


9
00:00:18,200 --> 00:00:20,000
会以不同颜色显示 

10
00:00:20,000 --> 00:00:23,300
该程序程序包含一个滑块  


11
00:00:23,300 --> 00:00:26,000
用于在图像处理操作中调整参数

12
00:00:26,000 --> 00:00:27,000
检查程序是否 

13
00:00:27,000 --> 00:00:29,300
已正确输入 


14
00:00:29,300 --> 00:00:30,900
的一个好方法是 


15
00:00:30,900 --> 00:00:32,500
检查非黑色的内容 

16
00:00:32,500 --> 00:00:34,000
任何没有定义的名称 


17
00:00:34,000 --> 00:00:35,400
都以不同颜色显示 

18
00:00:35,400 --> 00:00:38,500
因此 例如 若命令的名称拼写错误 


19
00:00:38,500 --> 00:00:40,600
就像本例中的名称 

20
00:00:40,600 --> 00:00:43,500
该名称将以不同颜色显示 


21
00:00:43,500 --> 00:00:45,600
语法错误也用颜色区分 


22
00:00:45,600 --> 00:00:47,800
例如 此输入中不匹配的括号 


23
00:00:47,800 --> 00:00:50,300
以不同的颜色显示 

24
00:00:50,300 --> 00:00:51,300
您可使用笔记本选项 

25
00:00:51,300 --> 00:00:53,300
使颜色区分更明显 


26
00:00:53,300 --> 00:00:56,300
如 这是具有选项设置的笔记本 


27
00:00:56,300 --> 00:00:57,600
可用亮绿色显示 Manipulate 函数中的变量 r 之类 

28
00:00:57,600 --> 00:00:59,500
未定义的局部变量 


29
00:00:59,500 --> 00:01:00,800
如此处用带下划线的大号洋红色字符 

30
00:01:00,800 --> 00:01:03,500
显示不完整名称 


31
00:01:03,500 --> 00:01:06,200
用红色显示语法错误 


32
00:01:06,200 --> 00:01:10,000
如方括号不匹配 


33
00:01:10,000 --> 00:01:11,500
有用于匹配方括号


34
00:01:11,500 --> 00:01:13,500
大括号和 


35
00:01:13,500 --> 00:01:15,500
其他分隔符的专用工具 

36
00:01:15,500 --> 00:01:17,300
如 当输入右分隔符时 


37
00:01:17,300 --> 00:01:19,000
如右括号 


38
00:01:19,000 --> 00:01:22,000
左分隔符将短暂闪烁以指示匹配 


39
00:01:22,000 --> 00:01:25,300
因此在该输入中 只要输入右括号 


40
00:01:25,300 --> 00:01:27,200
左括号就会短暂闪烁 


41
00:01:27,200 --> 00:01:29,500
颜色变为黑色 

42
00:01:29,500 --> 00:01:30,650
同样的输入 

43
00:01:30,650 --> 00:01:32,600
颜色恢复回默认值 


44
00:01:32,600 --> 00:01:35,500
一旦输入右分隔符 


45
00:01:35,500 --> 00:01:38,800
左分隔符再次短暂闪烁 


46
00:01:38,800 --> 00:01:40,500
找到匹配的括号的另一种方法是 


47
00:01:40,500 --> 00:01:42,800
单击括号间的任意位置 


48
00:01:42,800 --> 00:01:45,000
从而突显最近的 


49
00:01:45,000 --> 00:01:48,000
相匹配的括号 

50
00:01:48,000 --> 00:01:51,300
类似的功能是编辑菜单下的 Check Balance 选项 


51
00:01:51,300 --> 00:01:54,000
将光标定位在匹配分隔符间的任意位置 


52
00:01:54,000 --> 00:01:56,800
选择 Check Balance 或相应快捷键 


53
00:01:56,800 --> 00:01:59,000
则显示匹配的分隔符间的所有内容 


54
00:01:59,000 --> 00:02:01,300
包括匹配的分隔符 


55
00:02:01,300 --> 00:02:04,000
再次选择 Check Balance 


56
00:02:04,000 --> 00:02:08,000
将所显示内容扩展到下一个最近的封闭分隔符内 
.

57
00:02:08,000 --> 00:02:10,000
另一个相关功能是 


58
00:02:10,000 --> 00:02:12,000
双击则选择子表达式 


59
00:02:12,000 --> 00:02:15,000
如 双击 EdgeDetect 命令 


60
00:02:15,000 --> 00:02:17,800
选择命令名 


61
00:02:17,800 --> 00:02:18,800
三击选择命令 

62
00:02:18,800 --> 00:02:22,000
参数和封闭的括号对 


63
00:02:22,000 --> 00:02:23,700
在本例中 


64
00:02:23,700 --> 00:02:26,200
四击将选择 Manipulate 命令的参数 


65
00:02:26,200 --> 00:02:30,000
五击或更多次单击将选择整个输入 


66
00:02:30,000 --> 00:02:31,800
这些用于查找子表达式 


67
00:02:31,800 --> 00:02:32,600
和匹配的括号对的功能 

68
00:02:32,600 --> 00:02:35,300
对于那些很难定位命令开头 


69
00:02:35,300 --> 00:02:37,800
和结尾的多行命令 


70
00:02:37,800 --> 00:02:40,300
特别有用 

71
00:02:40,300 --> 00:02:42,600
还有几种通过修改格式 


72
00:02:42,600 --> 00:02:44,000
帮助正确使用语法 


73
00:02:44,000 --> 00:02:46,600
并提高程序可读性的方法


74
00:02:46,600 --> 00:02:48,100
从计算机编程的早期 


75
00:02:48,100 --> 00:02:49,950
就开始使用的一种传统方法是 


76
00:02:49,950 --> 00:02:51,000
缩进 

77
00:02:51,000 --> 00:02:53,800
如 该程序可这样处理 


78
00:02:53,800 --> 00:02:58,300
将匹配的分隔符放在相似的缩进级别 


79
00:02:58,300 --> 00:02:59,300
另一个修改格式的工具是 

80
00:02:59,300 --> 00:03:01,300
传统的数学符号 


81
00:03:01,300 --> 00:03:03,800
它在包含任何类型的 


82
00:03:03,800 --> 00:03:05,300
数学程序中都有用 

83
00:03:05,300 --> 00:03:07,800
如 这是 Erosion 函数的输入 


84
00:03:07,800 --> 00:03:09,500
其第二个参数是矩阵 


85
00:03:09,500 --> 00:03:12,300
但 与此处用大括号 


86
00:03:12,300 --> 00:03:14,800
显示的形式不同 


87
00:03:14,800 --> 00:03:17,800
可通过选择单元并从单元菜单下的“转换为”子菜单中 


88
00:03:17,800 --> 00:03:20,500
选择传统格式 


89
00:03:20,500 --> 00:03:23,000
以传统数学表示法显示 


90
00:03:23,000 --> 00:03:27,750
这使得该部分输入更像矩阵 


91
00:03:27,750 --> 00:03:28,900
这是另一个例子 

92
00:03:28,900 --> 00:03:32,000
涉及信号处理程序 


93
00:03:32,000 --> 00:03:34,600
该程序的一个关键细节是 


94
00:03:34,600 --> 00:03:37,800
这部分以线性程序符号形式输入的数学 


95
00:03:37,800 --> 00:03:39,800
可通过“转换为”菜单中的 StandardForm 


96
00:03:39,800 --> 00:03:42,000
或 TraditionalForm 


97
00:03:42,000 --> 00:03:44,500
修改显示格式为分数形式 


98
00:03:44,500 --> 00:03:47,500
进而使其更易于识别 

99
00:03:47,500 --> 00:03:50,500
在较大的程序中 


100
00:03:50,500 --> 00:03:52,500
尤其是比该程序大得多的程序 


101
00:03:52,500 --> 00:03:55,000
有用的另一种修改格式的工具图标化程序的各部分 


102
00:03:55,000 --> 00:03:57,500
例如 


103
00:03:57,500 --> 00:03:59,300
通过 Iconize 函数 


104
00:03:59,300 --> 00:04:01,800
可将数学公式替换为带标签的按钮 

105
00:04:01,800 --> 00:04:04,400
图标化形式 


106
00:04:04,400 --> 00:04:05,500
可像其他表达式一样被复制和粘贴 

107
00:04:05,500 --> 00:04:09,400
且在程序中的作用与原始表达式相同 


108
00:04:09,400 --> 00:04:11,900
也可将程序选定的部分图标化 


109
00:04:11,900 --> 00:04:15,000
例如 在此程序中 


110
00:04:15,000 --> 00:04:16,000
您可三击绘图函数的名称 

111
00:04:16,000 --> 00:04:18,800
选择其中进行绘图的部分 


112
00:04:18,800 --> 00:04:21,000
再在“编辑”菜单下选择“图标化所选部分” 


113
00:04:21,000 --> 00:04:25,800
将选定部分图标化 


114
00:04:25,800 --> 00:04:28,500
将所选内容图标化 


115
00:04:28,500 --> 00:04:31,000
也有相应的快捷键 在许多平台上 


116
00:04:31,000 --> 00:04:33,300
选定内容后都会弹出一个上下文菜单 


117
00:04:33,300 --> 00:04:37,000
通常可通过按住 ALT 键或 Ctrl 键后单击所选内容来打开该菜单 


118
00:04:37,000 --> 00:04:39,300
如 选择程序的一部分后 


119
00:04:39,300 --> 00:04:42,000
此操作将显示所选内容的上下文菜单 


120
00:04:42,000 --> 00:04:45,800
其中包括 Iconize 项 


121
00:04:45,800 --> 00:04:48,300
在带有已被图标化 


122
00:04:48,300 --> 00:04:50,600
的表达式的程序中 


123
00:04:50,600 --> 00:04:52,200
有几种方法可查看原表达式 


124
00:04:52,200 --> 00:04:55,000
其中一种是单击图标的加号 


125
00:04:55,000 --> 00:04:57,400
然后选择 Uniconize 

126
00:04:57,400 --> 00:04:59,500
如前所述 


127
00:04:59,500 --> 00:05:01,500
像这样的图标形式对于大型程序特别有用 


128
00:05:01,500 --> 00:05:04,000
在这种程序中 


129
00:05:04,000 --> 00:05:08,300
将长代码块转换为小标签块有助于管理长代码块


130
00:05:08,300 --> 00:05:10,100
除了本节中介绍的功能之外 


131
00:05:10,100 --> 00:05:13,300
还有许多其他有助于编程的功能 


132
00:05:13,300 --> 00:05:15,000
通常 只需单击弹出的按钮 


133
00:05:15,000 --> 00:05:17,000
便可查找有用的功能 


134
00:05:17,000 --> 00:05:19,700
例如 此输入中的错误消息提供了一个按钮 


135
00:05:19,700 --> 00:05:22,000
您可单击该按钮 


136
00:05:22,000 --> 00:05:24,400
打开堆栈跟踪以查看消息来源 


137
00:05:24,400 --> 00:05:27,300
这对于调试很有用 


138
00:05:27,300 --> 00:05:30,000
此外 


139
00:05:30,000 --> 00:05:31,500
本节还将重点放在 Wolfram 笔记本上 


140
00:05:31,500 --> 00:05:34,000
但是许多编程工具是基础计算引擎的一部分 


141
00:05:34,000 --> 00:05:36,400
例如 此输入中的 Echo 函数 


142
00:05:36,400 --> 00:05:40,800
是一种监视计算进度的简便方法 


143
00:05:40,800 --> 00:05:43,000
本节示例到此结束


144
00:05:43,000 --> 00:05:44,800
对于本节中介绍的功能 


145
00:05:44,800 --> 00:05:47,500
您可以在 Wolfram 文档中找到更多信息 


146
00:05:47,500 --> 00:05:50,300
特别是 可在 Using Input Assistant 教程中 


147
00:05:50,300 --> 00:05:53,000
找到有关语法着色 


148
00:05:53,000 --> 00:05:57,000
方括号匹配和相关主题的更多信息 


